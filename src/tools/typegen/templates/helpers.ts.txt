import {operations} from './spec';

type IndexBy<T, K extends keyof any, D = unknown> = (K extends keyof T ? T[K] : D);

type ValueOf<T, D = never> = T extends {} ? T[keyof T] : D;

export type RequestBody<OperationId extends keyof operations> =
    operations[OperationId] extends {requestBody: Record<string, any>} ?
      ValueOf<operations[OperationId]['requestBody']['content'], void> :
      void;

export type RequestPathParams<OperationId extends keyof operations> =
    IndexBy<operations[OperationId]['parameters'], 'path', {}>;

export type RequestQuery<OperationId extends keyof operations> =
    IndexBy<operations[OperationId]['parameters'], 'query', {}>;

export type RequestHeaders<OperationId extends keyof operations> =
    IndexBy<operations[OperationId]['parameters'], 'header', {}>;

export type ResponseBody<OperationId extends keyof operations> =
    ValueOf<IndexBy<ValueOf<operations[OperationId]['responses']>, 'content'>, void>;

export type ResponseHeaders<OperationId extends keyof operations> =
    IndexBy<ValueOf<operations[OperationId]['responses']>, 'headers'>;