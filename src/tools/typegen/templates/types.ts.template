/**
 * This file was auto-generated by openapi-ts-backend
 * Do not make direct changes to the file.
 */
import {EmptyObject, Property, ValueOf} from './utils';
interface ObjectSchema {[k: string]: Schema}

export type Schema = string | number | boolean | ObjectSchema | Array<Schema> | undefined;

export type Parameter = Record<string, Schema>;

export type ContentMap = Record<string, Schema>;

export type Response = {
  content?: ContentMap;
};

export type Operation = {
  parameters?: {
    path?: Parameter;
    query?: Parameter;
    header?: Parameter;
    cookie?: Parameter;
  };
  requestBody?: {
    content?: ContentMap;
  };
  responses?: Record<string, Response | unknown>; // empty response renders unknown
};

export type RequestBody<Op extends Operation> =
    Op extends {requestBody: Record<string, any>} ?
        ValueOf<Op['requestBody']['content'], void> :
        void;

export type RequestPathParams<Op extends Operation> =
    Property<Property<Op, 'parameters', EmptyObject>, 'path', EmptyObject>;

export type RequestQuery<Op extends Operation> =
    Property<Property<Op, 'parameters', EmptyObject>, 'query', EmptyObject>;

export type RequestHeaders<Op extends Operation> =
    Property<Property<Op, 'parameters', EmptyObject>, 'header', EmptyObject>;

export type ResponseBody<Op extends Operation> =
    ValueOf<Property<ValueOf<Property<Op, 'responses', EmptyObject>>, 'content'>, void>;

export type ResponseHeaders<Op extends Operation> =
    Property<ValueOf<Property<Op, 'responses', EmptyObject>>, 'headers'>;